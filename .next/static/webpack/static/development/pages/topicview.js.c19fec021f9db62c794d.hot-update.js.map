{"version":3,"file":"static/webpack/static/development/pages/topicview.js.c19fec021f9db62c794d.hot-update.js","sources":["webpack:///./components/topicview/optionList.js"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Link from \"next/link\";\nimport API_URL from \"../../config/config\";\nimport io from \"socket.io-client\";\n\nimport CustomTab from \"./tab\";\nimport { Popup, Placeholder, Card } from \"semantic-ui-react\";\nimport { AddIcon, More, Thumb_up, Thumb_down, InsertLink } from \"../Icons\";\nimport { Button, Modal } from \"react-bootstrap\";\n\nimport {\n  _GET_TOPICS,\n  GET_RELATED_TOPICS_URL,\n  GET_SPECIFIC_TOPIC_URL,\n  AddUserReactionToOption,\n  GetUserReactionToLikeOption,\n  GetUserReactionToDisLikeOption,\n  MarkOptionAsSpam,\n  UpdateOption,\n  SaveUpdateHistory,\n  GetQuestionUpdatedAt,\n  GetQuestionNumOfRecs,\n  UpdateCon,\n  UpdatePro,\n  SaveConHistory,\n  SaveProHistory,\n  AddOptionImage\n\n} from \"../../apiRequests/apiRequests\";\n\nimport Signin from \"../../pages/signin\";\nimport Signup from \"../../pages/signup\";\nimport TopicViewPopupModal from \"../modal/topicviewPopupModal\";\n\nconst socket = io(API_URL);\n\nconst imageArr = [\n  \"/static/thishouse.png\",\n  \"/static/avatar.png\",\n  \"/static/thishouse.png\"\n];\nexport default class OptionList extends Component {\n  state = {\n    inc: 0, //inc stands for increase\n    dec: 0, //dec stands for decrease\n    experience: \"\",\n    showClass: false,\n    clickedOptionDetails: {},\n    user_data: {},\n    type: \"\",\n    data: this.props.data,\n    ioResponseLike: false,\n    ioResponseDisLike: false,\n    UserLoggedIn: true,\n    showSignInOverlay: false,\n    UserClickedLogin: false,\n    UserClickedSignup: false,\n    rxn: null,\n    showUpdateModal: false,\n    show: false,\n    updatedOption: \"\",\n    updatedOptionLink: \"\",\n    proTitle: \"\",\n    conTitle: \"\",\n    proDescription: \"\",\n    conDescription: \"\",\n    updateCon: false,\n    updatePro: false,\n    question: \"\",\n    option: \"\",\n    optionId: \"\",\n    updateImage: false,\n    imageLink: \"\",\n    mediaArr: null,\n    LikeColor : {},\n    DisLikeColor : {},\n    LikeNumber : this.props.LikeNumber,\n    DisLikeNumber : this.props.DisLikeNumber,\n    user_id : this.props.user_id\n  };\n\nasync componentWillMount(){\n \n  console.log(this.state.user_id.then(async res=>{\n    const LikeColor =  await GetUserReactionToLikeOption(res,this.state.data);\n    const DisLikeColor = await GetUserReactionToDisLikeOption(res,this.state.data);\n    this.setState({\n      LikeColor : LikeColor.data,\n      DisLikeColor : DisLikeColor.data\n    })\n  \n  }));\n \n\n}\n\n  componentDidMount() {\n    this.getSocketResponse();\n   \n\n  }\n\n\n  getSocketResponse = () => {\n    socket.on(\"rec_added\", data => {\n      if (data.type === \"like\") {\n        this.setState({\n          ioResponseLike: true,\n          _like: data.like\n        });\n        return;\n      }\n\n      if (data.type === \"dislike\") {\n        this.setState({\n          ioResponseDisLike: true,\n          _dislike: data.dislike\n        });\n        return;\n      }\n    });\n  };\n\n  handleDivClose = e => {\n    if (e.target === this.div) {\n      this.setState(previousState => ({\n        showSignInOverlay: !previousState.showSignInOverlay\n      }));\n    }\n  };\n\n  openLoginOverlay = () => {\n    this.setState({\n      UserClickedSignup: false,\n      UserLoggedIn: false,\n      showSignInOverlay: true\n    });\n  };\n\n  openSignupOverlay = () => {\n    this.setState({\n      UserClickedSignup: !this.state.UserClickedSignup,\n      UserLoggedIn: true,\n      showSignInOverlay: false\n    });\n  };\n\n  openBtn = () => {\n    this.setState({\n      showClass: true\n    });\n  };\n\n  closeBtn = () => {\n    this.setState({\n      showClass: false\n    });\n  };\n\n  closeModal = e => {\n    if (e.target === this.recCard) {\n      this.setState({ showClass: false });\n    }\n  };\n\n  handleDislike = () => {\n    let user = JSON.parse(localStorage.getItem(\"user_details\"));\n    if (!user) {\n      alert(\"Not registered\");\n      return;\n    }\n    this.setState({\n      type: \"dislike\"\n    });\n  };\n\n  handlelike = (data) =>{\n       let color = this.state.LikeColor;\n       let colo = this.state.DisLikeColor;\n       let LikeNumber = this.state.LikeNumber;\n       let DisLikeNumber = this.state.DisLikeNumber;\n         if(color[data.option]==\"grey\" && colo[data.option] ==\"grey\"){\n          color[data.option] = \"blue\";\n          LikeNumber[data.option] = LikeNumber[data.option] +1;\n          colo[data.option] = \"grey\";\n         }\n        else if(color[data.option]==\"grey\" && colo[data.option] ==\"blue\"){\n          color[data.option] = \"blue\";\n          LikeNumber[data.option] = LikeNumber[data.option] +1;\n          DisLikeNumber[data.option] = DisLikeNumber[data.option] -1;\n          colo[data.option] = \"grey\";\n         }\n         else{\n          LikeNumber[data.option] = LikeNumber[data.option] -1;\n          color[data.option] = \"grey\";\n         }\n          this.setState({\n            LikeColor: color,\n            DisLikeColor : colo,\n            LikeNumber : LikeNumber,\n            DisLikeNumber : DisLikeNumber\n          });\n      const _user = JSON.parse(localStorage.getItem(\"user_details\"));\n      const rxn = {\n        userId: _user._id,\n        option : data.option,\n        type: true\n      };\n      AddUserReactionToOption(rxn)\n        .then(res => {\n      \n        }\n            \n        )\n        .catch(err =>{\n          console.log(err);\n          console.log(err.response.data);\n        });\n   \n  }\n\n\n//  getLikeButtonColor= option =>  {\n//   // const _user = JSON.parse(localStorage.getItem(\"user_details\"));\n//   // return  GetUserReactionToLikeOption(\"5dada7908a5390365411a11f\",option)\n//   //   .then(res => {\n//   //     console.log(res.data)\n//   //    return \"green\";\n//   //   }\n        \n//   //   )\n//   //   .catch(err =>{\n//   //     console.log(err);\n//   //     console.log(err.response.data);\n//   //   });\n//     return \"yellow\";\n//   }\n\n  handleDislike = (data) =>{\n    let color = this.state.DisLikeColor;\n    let colo = this.state.LikeColor\n    let LikeNumber = this.state.LikeNumber;\n    let DisLikeNumber = this.state.DisLikeNumber;\n          if(color[data.option]==\"grey\" && colo[data.option] ==\"grey\"){\n           color[data.option] = \"blue\";\n           colo[data.option] = \"grey\"\n           DisLikeNumber[data.option] = DisLikeNumber[data.option] +1;\n          }\n         else if(color[data.option]==\"grey\" && colo[data.option] ==\"blue\"){\n            color[data.option] = \"blue\";\n            colo[data.option] = \"grey\"\n            DisLikeNumber[data.option] = DisLikeNumber[data.option] +1;\n            LikeNumber[data.option] = LikeNumber[data.option] -1;\n           }\n          else{\n           color[data.option] = \"grey\";\n           DisLikeNumber[data.option] = DisLikeNumber[data.option] -1;\n          }\n           this.setState({\n             DisLikeColor: color,\n             LikeColor : colo,\n             DisLikeNumber : DisLikeNumber,\n             LikeNumber:LikeNumber\n           });\n      const _user = JSON.parse(localStorage.getItem(\"user_details\"));\n      const rxn = {\n        userId: _user._id,\n        option : data.option,\n        type: false\n      };\n      AddUserReactionToOption(rxn)\n        .then(res => {\n        \n        }\n            \n        )\n        .catch(err =>{\n          console.log(err);\n          console.log(err.response.data);\n        });\n   \n  }\n\n\n  handleInputChange = ({ target: { value, name } }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSpam = option => {\n    let user = JSON.parse(localStorage.getItem(\"user_details\"));\n    if (!user) {\n      alert(\"Sign in to carry out this action\");\n      return;\n    }\n\n    let _data = {\n      option,\n      isSpam: true,\n      userIdWhoMarkedAsSpam: user._id\n    };\n    //Mark option as spam\n    MarkOptionAsSpam(_data)\n      .then(response => {\n        alert(\"Option Marked as Spam\");\n      })\n      .catch(error => console.log(error));\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  onOptionUpdateChange = ({ target: { value, name } }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSaveUpdatedOption = () => {\n    let user = JSON.parse(localStorage.getItem(\"user_details\"));\n    const { updatedOption, updatedOptionLink, optionId } = this.state;\n\n    if (!user) {\n      alert(\"Login to carry out this action\");\n      return;\n    }\n    if (updatedOption === \"\" || updatedOptionLink === \"\" || !optionId) {\n      alert(\"no way\");\n      console.log(\"no way\");\n      return;\n    }\n    let _saveUpdateHistory = {\n      option: updatedOption,\n      optionId: optionId,\n      username: user.username,\n      userId: user._id\n    };\n\n    UpdateOption(optionId, user._id, updatedOption, updatedOptionLink)\n      .then(result => {\n        alert(\"Option Updated\");\n        this.setState({ show: false });\n        SaveUpdateHistory(_saveUpdateHistory)\n          .then(() => console.log(\"saved\"))\n          .catch(err => console.log(err.response));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleUpdatePro = (visible, caption, pro, id, question, option, optionId) => {\n    this.setState({\n      updatePro: visible,\n      proTitle: caption,\n      proDescription: pro,\n      proId: id,\n      question,\n      option,\n      optionId\n    });\n  };\n\n  handleUpdateCon = (visible, caption, con, id, question, option, optionId) => {\n    this.setState({\n      updateCon: visible,\n      conTitle: caption,\n      conDescription: con,\n      conId: id,\n      question,\n      option,\n      optionId\n    });\n  };\n\n  handleProUpdate = () => {\n    let user = JSON.parse(localStorage.getItem(\"user_details\"));\n    const {\n      proTitle,\n      proDescription,\n      proId,\n      option,\n      optionId,\n      question\n    } = this.state;\n\n    if (!user) {\n      alert(\"Login to carry out this action\");\n      return;\n    }\n\n    if (proTitle === \"\" || proDescription === \"\") {\n      alert(\"It can't be empty\");\n      return;\n    }\n\n    let data = {\n      option,\n      username: user.username,\n      optionId,\n      title: proTitle,\n      description: proDescription,\n      userId: user._id,\n      question,\n      proId\n    };\n\n    UpdatePro(\n      proId,\n      user._id,\n      proTitle.replace(\"%\", \" percent\"),\n      proDescription.replace(\"%\", \" percent\"),\n      option,\n      optionId,\n      question\n    )\n      .then(result => {\n        alert(\"updated\");\n        this.setState({ updatePro: false });\n        SaveProHistory(data)\n          .then(() => console.log(\"saved\"))\n          .catch(err => console.log(err.response));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleConUpdate = () => {\n    let user = JSON.parse(localStorage.getItem(\"user_details\"));\n    const {\n      conTitle,\n      option,\n      question,\n      optionId,\n      conDescription,\n      conId\n    } = this.state;\n\n    if (!user) {\n      alert(\"Login to carry out this action\");\n      return;\n    }\n\n    if (conTitle === \"\" || conDescription === \"\") {\n      alert(\"It can't be empty\");\n      return;\n    }\n\n    let data = {\n      option,\n      username: user.username,\n      optionId,\n      title: conTitle,\n      description: conDescription,\n      userId: user._id,\n      question,\n      conId\n    };\n\n    UpdateCon(\n      conId,\n      user._id,\n      conTitle.replace(\"%\", \" percent\"),\n      conDescription.replace(\"%\", \" percent\"),\n      option,\n      optionId,\n      question\n    )\n      .then(result => {\n        alert(\"updated\");\n        this.setState({ updateCon: false });\n        SaveConHistory(data)\n          .then(result => console.log(result))\n          .catch(err => console.log(err.response));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // showUpdateImageModal = () => {\n  //   this.setState({\n  //     updateImage: true\n  //   });\n  // };\n\n  handleUpdateImage = () => {\n    //Parameters here\n    const { newImage, optionId } = this.state;\n    AddOptionImage(optionId, newImage)\n      .then(axiosResponse => {\n        this.setState({\n          optionImageAdded: true\n        });\n      })\n      .catch(err => {\n        this.setState({\n          err: err\n        });\n      });\n  };\n\n  //Add image url to image array\n\n  addImageUrlToImageArray = ({ target: { value, name } }) => {\n    this.setState({\n      newImage: value\n    });\n  };\n\n  handleShowModal = (visible, mediaArr, optionId) => {\n    this.setState({\n      updateImage: visible,\n      mediaArr,\n      optionId\n    });\n  };\n\n  render() {\n    const {\n      showClass,\n      clickedOptionDetails,\n      ioResponseLike,\n      ioResponseDisLike,\n      UserLoggedIn,\n      showSignInOverlay,\n      _disliked,\n      _liked,\n      UserClickedSignup,\n      rxn,\n      show,\n      optionItems,\n      proDescription,\n      proTitle,\n      conDescription,\n      conTitle,\n      updateCon,\n      updatePro,\n      link,\n      mediaArr,\n      newImage,\n      optionImageAdded\n    } = this.state;\n\n    const profileImageUrl = this.props.user.image\n      ? this.props.user.image\n      : \"/static/wor.jpg\";\n\n    const Likecolor = rxn ? \"blue\" : \"grey\";\n    const disLikeColor = _disliked ? \"blue\" : \"grey\";\n\n    return (\n      <Fragment>\n        {this.props.data.map(item => {\n          let like = ioResponseLike ? this.state._like : item.like;\n          let dislike = ioResponseDisLike ? this.state._dislike : item.dislike;\n\n          if (item.mediaUrl.length < 2) {\n            return (\n              <div className=\"card-list\" key={item._id}>\n                <div>\n                  <h2 className=\"option-name\">\n                    {\n                      <span\n                        className={\"score-card\"}\n                        style={{ marginRight: \"15px\", marginLeft: \"10px\" }}\n                      >\n                        <span className=\"score\">{this.state.LikeNumber[item.option]-this.state.DisLikeNumber[item.option]}</span>\n                      </span>\n                    }\n                    <Link prefetch href={`/option/${item.option}`}>\n                      <span className=\"option-name-question\">\n                        {item.option}\n                      </span>\n                    </Link>\n                    <span className=\"more-icon\">\n                      <Popup\n                        trigger={\n                          <button className=\"more-icon-button\">\n                            <More color=\"transparent\" />\n                          </button>\n                        }\n                        on=\"click\"\n                        content={\n                          <strong>\n                            <p>\n                              <a\n                                onClick={() => {\n                                  if (\n                                    !JSON.parse(\n                                      localStorage.getItem(\"user_details\")\n                                    )\n                                  ) {\n                                    this.setState({\n                                      UserLoggedIn: false,\n                                      showSignInOverlay: true\n                                    });\n                                    return;\n                                  }\n\n                                  let _unique = {\n                                    option: item.option,\n                                    question: item.question,\n                                    optionImage: item.optionImage\n                                    ///OptionID and QuestionId may be added\n                                  };\n                                  this.setState({\n                                    clickedOptionDetails: _unique,\n                                    showClass: true\n                                  });\n                                }}\n                              >\n                                Add Pros and Cons\n                              </a>\n                            </p>\n                            <p>\n                              <Link href={`/updatehistory/${item.option}`}>\n                                <a>See Update History</a>\n                              </Link>\n                            </p>\n                            <p>\n                              <a\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => {\n                                  this.setState({\n                                    show: true,\n                                    updatedOption: item.option,\n                                    updatedOptionLink: item.link,\n                                    optionId: item._id\n                                  });\n                                }}\n                              >\n                                Update Option\n                              </a>\n                            </p>\n                            {/* <p>\n                              <Link href=\"#\">\n                                <a>Update Specs</a>\n                              </Link>\n                            </p> */}\n                            <p>\n                              <a\n                                style={{ color: \"#E91E63\", cursor: \"pointer\" }}\n                                onClick={() => this.handleSpam(item.option)}\n                              >\n                                Mark Option as Spam\n                              </a>\n                            </p>\n                          </strong>\n                        }\n                        hideOnScroll\n                        position=\"bottom right\"\n                      />\n                    </span>\n                  </h2>\n                </div>\n\n                <div className=\"carousel\" style={{ marginBottom: \"10px\" }} />\n                <div className=\"little-card\">\n                  {item.mediaUrl.slice(0, 3).map((item, index) => {\n                    return (\n                      <div className=\"twoo\" key={index}>\n                        <img src={item} className=\"option-image\" />\n                      </div>\n                    );\n                  })}\n                  <div\n                    className=\"twoo add-media\"\n                    onClick={() =>\n                      this.handleShowModal(true, item.mediaUrl, item._id)\n                    }\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \" center\",\n                        flexDirection: \"column\"\n                      }}\n                    >\n                      <span>\n                        <AddIcon color=\"#58647b\" />\n                      </span>\n                      <span>Add Image or Video</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"fix\" />\n                <CustomTab\n                  experiences={item.experiences}\n                  userAvatar={item.userImage}\n                  pros={item.pros}\n                  cons={item.cons}\n                  id={item._id}\n                  option={item.option}\n                  question={item.question}\n                  UpdateCon={this.handleUpdateCon}\n                  UpdatePro={this.handleUpdatePro}\n                />\n\n                <div className=\"rec-btn\">\n                  <div>\n                    <button className=\"get-it-btn\">\n                      <span className=\"thumb-icon\">\n                        <InsertLink color={\"#fff\"} />\n                      </span>\n                      <Link href={`http://${item.link}`}>\n                        <a className=\"btn-content get-it\" target={\"_blank\"}>\n                          {item.price && ` $ ${item.price}`}\n                          {!item.price && \" GET IT HERE\"}\n                        </a>\n                      </Link>\n                    </button>\n                  </div>\n\n                  <span className={\"rec-holder\"}>\n                    <button\n                      className=\"like-btn\"\n                      onClick={() => {\n                        if (!JSON.parse(localStorage.getItem(\"user_details\"))) {\n                          this.setState({\n                            UserLoggedIn: false,\n                            showSignInOverlay: true\n                          });\n                          return;\n                        }\n\n                        let _unique = {\n                          option: item.option,\n                          question: item.question,\n                          optionImage: item.mediaUrl,\n                          optionId: item._id\n\n                          ///OptionID and QuestionId may be added\n                        };\n                        // this.setState(\n                        //   {\n                        //     clickedOptionDetails: _unique,\n                        //     type: \"like\",\n                        //     showClass: true\n                        //   },\n                        //   () => {\n                        //     this.setState(previousState => ({\n                        //       inc: previousState.inc + 1\n                        //     }));\n                        //   }\n                        // );\n\n                        {this.handlelike(_unique)};\n                      }}\n                    >\n                      <span className=\"thumb-icon lik\">\n                        <Thumb_up color={this.state.LikeColor[item.option]} />\n                      </span>\n                      <span\n                        className={\n                          like\n                            ? \"btn-content btn-content-active\"\n                            : \"btn-content\"\n                        }\n                      >\n                        <span className=\"recommend-text num\">{this.state.LikeNumber[item.option]}</span>\n                      </span>\n                    </button>\n\n                    <button\n                      className=\"dislike-btn\"\n                      onClick={() => {\n                        if (!JSON.parse(localStorage.getItem(\"user_details\"))) {\n                          this.setState({\n                            UserLoggedIn: false,\n                            showSignInOverlay: true\n                          });\n                          return;\n                        }\n\n                        if (JSON.parse(localStorage.getItem(\"user_details\"))) {\n                          let _unique = {\n                            option: item.option,\n                            question: item.question,\n                            optionImage: item.mediaUrl,\n                            optionId: item._id\n                            ///OptionID and QuestionId may be added\n                          };\n\n                          // this.setState(\n                          //   {\n                          //     clickedOptionDetails: _unique,\n                          //     type: \"dislike\",\n                          //     showClass: true\n                          //   },\n                          //   () => {\n                          //     this.setState(previousState => ({\n                          //       dec: previousState.dec + 1\n                          //     }));\n                          //   }\n                          // );\n\n                          {this.handleDislike(_unique)};\n\n                          return;\n                        }\n                      }}\n                    >\n                      <span className=\"thumb-icon dis\">\n                        <Thumb_down color={this.state.DisLikeColor[item.option]} />\n                      </span>\n                      <span\n                        className={\n                          _disliked\n                            ? \"btn-content btn-content-active\"\n                            : \"btn-content\"\n                        }\n                      >\n                       <span className=\"recommend-text num\">{this.state.DisLikeNumber[item.option]}</span>\n                      </span>\n                    </button>\n                  </span>\n                </div>\n              </div>\n            );\n          }\n\n          return (\n            <div className=\"card-list\" key={item._id}>\n              <div className=\"card-list-top-header\">\n                <h2 className=\"option-name\">\n                  {\n                    <span\n                      className={\"score-card\"}\n                      style={{ marginRight: \"3px\" }}\n                    >\n                      <span className=\"score\">{item.rating}</span>\n                    </span>\n                  }\n                  <Link\n                    prefetch\n                    as={`/option/${item.option}`}\n                    href={`/option/${item.option}`}\n                  >\n                    <span className=\"option-name-question\">{item.option}</span>\n                  </Link>\n                  <span className=\"more-icon\">\n                    <Popup\n                      trigger={\n                        <button className=\"more-icon-button\">\n                          <More color=\"transparent\" />\n                        </button>\n                      }\n                      on=\"click\"\n                      content={\n                        <strong>\n                          <p>\n                            <a\n                              onClick={() => {\n                                if (\n                                  !JSON.parse(\n                                    localStorage.getItem(\"user_details\")\n                                  )\n                                ) {\n                                  this.setState({\n                                    UserLoggedIn: false,\n                                    showSignInOverlay: true\n                                  });\n                                  return;\n                                }\n\n                                let _unique = {\n                                  option: item.option,\n                                  question: item.question,\n                                  optionImage: item.optionImage\n                                  ///OptionID and QuestionId may be added\n                                };\n                                this.setState({\n                                  clickedOptionDetails: _unique,\n                                  showClass: true\n                                });\n                              }}\n                            >\n                              Add Pros and Cons\n                            </a>\n                          </p>\n                          <p>\n                            <Link  href={`/updatehistory/${item.option}`}>\n                              <a>See Update History</a>\n                            </Link>\n                          </p>\n                          <p>\n                            <a\n                              style={{ cursor: \"pointer\" }}\n                              onClick={() => {\n                                this.setState({\n                                  show: true,\n                                  updatedOption: item.option,\n                                  updatedOptionLink: item.link,\n                                  optionId: item._id\n                                });\n                              }}\n                            >\n                              Update Option\n                            </a>\n                          </p>\n                          {/* <p>\n                            <Link href=\"#\">\n                              <a>Update Specs</a>\n                            </Link>\n                          </p> */}\n                          <p>\n                            <a\n                              style={{ color: \"#E91E63\", cursor: \"pointer\" }}\n                              onClick={() => this.handleSpam(item.option)}\n                            >\n                              Mark Option as Spam\n                            </a>\n                          </p>\n                        </strong>\n                      }\n                      hideOnScroll\n                      position=\"bottom right\"\n                    />\n                  </span>\n                </h2>\n              </div>\n\n              <div className=\"carousel\" style={{ marginBottom: \"10px\" }} />\n              <div className=\"little-card\">\n                {item.mediaUrl.slice(0, 2).map((item, index) => {\n                  return (\n                    <div className=\"twoo\" key={index}>\n                      <img src={item} className=\"option-image\" />\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"fix\" />\n              <CustomTab\n                experiences={item.experiences}\n                userAvatar={item.userImage}\n                pros={item.pros}\n                cons={item.cons}\n                id={item._id}\n                option={item.option}\n                question={item.question}\n                UpdateCon={this.handleUpdateCon}\n                UpdatePro={this.handleUpdatePro}\n              />\n\n              <div className=\"rec-btn\">\n                <div>\n                  <button className=\"get-it-btn\">\n                    <span className=\"thumb-icon\">\n                      <InsertLink color={\"#fff\"} />\n                    </span>\n                    <Link href={`http://${item.link}`}>\n                      <a className=\"btn-content get-it\" target={\"_blank\"}>\n                        {item.price && ` $ ${item.price}`}\n                        {!item.price && \" GET IT HERE\"}\n                      </a>\n                    </Link>\n                  </button>\n                </div>\n\n                <span className={\"rec-holder\"}>\n                  <button\n                    className=\"like-btn\"\n                    onClick={() => {\n                      if (!JSON.parse(localStorage.getItem(\"user_details\"))) {\n                        this.setState({\n                          UserLoggedIn: false,\n                          showSignInOverlay: true\n                        });\n                        return;\n                      }\n                      let _unique = {\n                        option: item.option,\n                        question: item.question,\n                        optionImage: item.mediaUrl,\n                        optionId: item._id\n\n                        ///OptionID and QuestionId may be added\n                      };\n                      // this.setState(\n                      //   {\n                      //     clickedOptionDetails: _unique,\n                      //     type: \"like\",\n                      //     showClass: true\n                      //   },\n                      //   () => {\n                      //     this.setState(previousState => ({\n                      //       inc: previousState.inc + 1\n                      //     }));\n                      //   }\n                      // );\n                      {this.handlelike(_unique)};\n                    }}\n                  >\n                    <span className=\"thumb-icon lik\">\n                    <Thumb_up color={this.state.LikeColor[item.option]} />\n                    </span>\n                    <span\n                      className={\n                        like ? \"btn-content btn-content-active\" : \"btn-content\"\n                      }\n                    >\n                     <span className=\"recommend-text num\">{this.state.LikeNumber[item.option]}</span>\n                    </span>\n                  </button>\n\n                  <button\n                    className=\"dislike-btn\"\n                    onClick={() => {\n                      if (!JSON.parse(localStorage.getItem(\"user_details\"))) {\n                        this.setState({\n                          UserLoggedIn: false,\n                          showSignInOverlay: true\n                        });\n                        return;\n                      }\n\n                      if (JSON.parse(localStorage.getItem(\"user_details\"))) {\n                        let _unique = {\n                          option: item.option,\n                          question: item.question,\n                          optionImage: item.mediaUrl,\n                          optionId: item._id\n                          ///OptionID and QuestionId may be added\n                        };\n\n                        // this.setState(\n                        //   {\n                        //     clickedOptionDetails: _unique,\n                        //     type: \"dislike\",\n                        //     showClass: true\n                        //   },\n                        //   () => {\n                        //     this.setState(previousState => ({\n                        //       dec: previousState.dec + 1\n                        //     }));\n                        //   }\n                        // );\n                         {this.handleDislike(_unique)};\n\n                        return;\n                      }\n                    }}\n                  >\n                    <span className=\"thumb-icon dis\">\n                    <Thumb_down color={this.state.DisLikeColor[item.option]} />\n                    </span>\n                    <span\n                      className={\n                        _disliked\n                          ? \"btn-content btn-content-active\"\n                          : \"btn-content\"\n                      }\n                    >\n                      <span className=\"recommend-text num\">{this.state.DisLikeNumber[item.option]}</span>\n                    </span>\n                  </button>\n                </span>\n              </div>\n            </div>\n          );\n        })}\n\n        {/** For Signin is here */}\n        <div\n          className={\n            showSignInOverlay ? \"overlayShow showSignin-container\" : \"overlay\"\n          }\n          onClick={e => this.handleDivClose(e)}\n          ref={el => (this.div = el)}\n        >\n          {\n            <em\n              className=\"close\"\n              onClick={() => {\n                this.setState({\n                  showSignInOverlay: false,\n                  UserLoggedIn: false\n                });\n              }}\n            >\n              &times;\n            </em>\n          }\n\n          {!UserLoggedIn && <Signin openSignup={this.openSignupOverlay} />}\n        </div>\n        {/* End of Signin */}\n\n        {/** For Signup is here */}\n        <div\n          className={\n            UserClickedSignup ? \"overlayShow showSignin-container\" : \"overlay\"\n          }\n          onClick={e => this.handleDivClose(e)}\n          ref={el => (this.div = el)}\n        >\n          {\n            <em\n              className=\"close\"\n              onClick={() => {\n                this.setState({\n                  UserClickedSignup: false\n                });\n              }}\n            >\n              &times;\n            </em>\n          }\n\n          {UserClickedSignup && <Signup openLogin={this.openLoginOverlay} />}\n        </div>\n        {/* End of Signup */}\n\n        <div\n          onClick={e => this.closeModal(e)}\n          className={showClass ? \"overlayShowie\" : \"overlay\"}\n          ref={el => (this.recCard = el)}\n        >\n          <section className=\"add-rec-popup-section\">\n            <TopicViewPopupModal\n              profileImage={profileImageUrl}\n              option={clickedOptionDetails.option}\n              closeBtn={this.closeBtn}\n              question={clickedOptionDetails.question}\n              optionImage={clickedOptionDetails.optionImage}\n              optionId={clickedOptionDetails.optionId}\n              type={this.state.type}\n              socketId={socket.id}\n            />\n          </section>\n\n          <div\n            style={{\n              top: \"4%\",\n              fontSize: \"60px\",\n              cursor: \"pointer\",\n              position: \"absolute\"\n            }}\n            className={\"topicview-close-icon\"}\n            onClick={this.closeBtn}\n          >\n            &times;\n          </div>\n        </div>\n\n        <>\n          <Modal\n            style={{ marginTop: \"70px\" }}\n            show={show}\n            onHide={this.handleClose}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>Update Option</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form className=\"update-option-form\">\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    onChange={this.onOptionUpdateChange}\n                    name=\"updatedOption\"\n                    value={this.state.updatedOption}\n                    style={{ width: \"100px !important\" }}\n                  />\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    value={this.state.updatedOptionLink}\n                    name=\"updatedOptionLink\"\n                    onChange={this.onOptionUpdateChange}\n                  />\n                </div>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.handleClose}>\n                Close\n              </Button>\n              <Button\n                style={{ backgroundColor: \"rgb(91, 56, 141)\", border: 0 }}\n                onClick={() => this.handleSaveUpdatedOption()}\n              >\n                Save Changes\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n\n        {/* Update Pro is here*/}\n\n        <>\n          <Modal\n            style={{ marginTop: \"70px\" }}\n            show={updatePro}\n            onHide={() => this.handleUpdatePro(false)}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>Update Pro</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form className=\"update-option-form\">\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    onChange={e => this.onOptionUpdateChange(e)}\n                    name=\"proTitle\"\n                    value={proTitle}\n                    style={{ width: \"100px !important\" }}\n                  />\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    value={proDescription}\n                    name=\"proDescription\"\n                    onChange={e => this.onOptionUpdateChange(e)}\n                  />\n                </div>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                variant=\"secondary\"\n                onClick={() => this.handleUpdatePro(false)}\n              >\n                Close\n              </Button>\n              <Button\n                style={{ backgroundColor: \"rgb(91, 56, 141)\", border: 0 }}\n                onClick={this.handleProUpdate}\n              >\n                Save Changes\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n\n        {/* Update Con is here*/}\n        <>\n          <Modal\n            style={{ marginTop: \"70px\" }}\n            show={updateCon}\n            onHide={() => this.handleUpdateCon(false)}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>Update Con</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form className=\"update-option-form\">\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    onChange={e => this.onOptionUpdateChange(e)}\n                    name=\"conTitle\"\n                    value={conTitle}\n                    style={{ width: \"100px !important\" }}\n                  />\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"update-option\"\n                    value={conDescription}\n                    name=\"conDescription\"\n                    onChange={e => this.onOptionUpdateChange(e)}\n                  />\n                </div>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                variant=\"secondary\"\n                onClick={() => this.handleUpdateCon(false)}\n              >\n                Close\n              </Button>\n              <Button\n                style={{ backgroundColor: \"rgb(91, 56, 141)\", border: 0 }}\n                onClick={() => this.handleConUpdate()}\n              >\n                Save Changes\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n\n        {/** Update Image */}\n\n        <>\n          <Modal\n            style={{ marginTop: \"70px\" }}\n            show={this.state.updateImage}\n            onHide={() => this.handleShowModal(false)}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>Add Image</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form className=\"update-option-form\">\n                <div>\n                  <input\n                    type=\"url\"\n                    className=\"update-option\"\n                    onChange={e => this.onOptionUpdateChange(e)}\n                    onKeyUp={e => this.addImageUrlToImageArray(e)}\n                    // onBlur={}\n                    name=\"imageLink\"\n                    value={this.state.imageLink}\n                    style={{ width: \"100px !important\" }}\n                  />\n                </div>\n\n                <div>\n                  <div className=\"image-container\">\n                    {mediaArr && (\n                      <>\n                        {mediaArr.slice(0, 4).map((item, index) => {\n                          return (\n                            <div\n                              key={index}\n                              onClick={() =>\n                                this.setState({\n                                  imageLink: item\n                                })\n                              }\n                            >\n                              <img src={item} className=\"im\" />\n                            </div>\n                          );\n                        })}\n                      </>\n                    )}\n\n                    {newImage ? (\n                      <div>\n                        <img src={newImage} className=\"im\" />\n                      </div>\n                    ) : (\n                      <Placeholder style={{ height: \"50px\", width: \"50px\" }}>\n                        <Placeholder.Image square />\n                      </Placeholder>\n                    )}\n                  </div>\n                </div>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                variant=\"secondary\"\n                onClick={() => this.handleShowModal(false)}\n              >\n                Close\n              </Button>\n              <Button\n                // variant=\"primary\"\n                style={{ backgroundColor: \"rgb(91, 56, 141)\", border: 0 }}\n                onClick={() => this.handleUpdateImage()}\n                disabled={optionImageAdded}\n              >\n                {optionImageAdded ? \"Saved\" : \"Save Changes\"}\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n\n        <style jsx>\n          {`\n            .image-container {\n              display: flex;\n            }\n\n            .image-container div {\n              width: 50px;\n              height: 50px;\n              border: 1px solid grey;\n              padding: 5px;\n              border-radius: 4px;\n              margin-right: 6px;\n            }\n            .im {\n              max-width: 100%;\n              vertical-align: middle;\n            }\n\n            .card-list {\n              overflow: hidden;\n              background-color: #fdfdfd;\n              margin-bottom: 36px;\n              padding: 18px;\n              box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.05);\n              border: 1px solid #e6e8eb;\n              border-radius: 15px;\n              min-width: 850px;\n              min-height: 300px;\n              box-sizing: border-box;\n              font-family: Cabin;\n              // border: 1px solid red;\n            }\n\n            .fix {\n              margin-bottom: 30px;\n            }\n\n            .topicview-close-icon {\n              left: 91%;\n              color: rgb(91, 56, 141);\n              background: #e6ecf0;\n            }\n\n            .update-option {\n              width: 300px;\n              border: 1px solid grey;\n              border-radius: 3px;\n              padding: 10px;\n              outline: 0;\n              font-family: inherit;\n              font-weight: 600;\n            }\n            .update-option-form {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              flex-direction: column;\n            }\n\n            .add-rec-popup-section {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n            }\n\n            .update-option-form div {\n              padding: 6px;\n            }\n\n            .score-card {\n              cursor: pointer;\n              // background: #000;\n              background-image: linear-gradient(135deg, #737373, #171717);\n              color: #fff;\n              text-align: center;\n              width: 30px;\n              height: 30px;\n              display: inline-block;\n              border-radius: 2px;\n              // transform: skewX(-22deg);\n              // transform-origin: top left;\n            }\n            .score {\n              position: relative;\n              top: 4px;\n            }\n\n            .showSignin-container {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n            }\n            .close {\n              font-size: 56px;\n              position: relative;\n              margin-top: -550px;\n              left: 50%;\n              color: rgb(91, 56, 141);\n              cursor: pointer;\n              // background: #e6ecf0;\n            }\n\n            a {\n              color: #222;\n            }\n            .more-icon-button {\n              background: #eee;\n              border: 0;\n              cursor: pointer;\n              border-radius: 35px;\n              outline: 0;\n              height: 35px;\n              width: 35px;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n            }\n            .option-name {\n              display: inline-block;\n              width: 100%;\n            }\n            .option-name-question:hover {\n              color: rgb(96, 56, 141);\n              cursor: pointer;\n            }\n            .option-name-question {\n              font-size: 24px;\n              position: relative;\n              top: 7px;\n              text-transform: Capitalize;\n              letter-spacing: 0.4px;\n            }\n\n            .option-image {\n              width: 100%;\n              height: 100%;\n              margin: 0;\n              padding: 0;\n            }\n\n            .little-card {\n              box-sizing: border-box;\n              display: flex;\n              flex-direction: row;\n              // border: 1px solid red;\n              justify-content: flex-start;\n              // padding-left: 5px;\n              // padding-right: 5px;\n            }\n\n            .little-card .two {\n              padding: 5px;\n              background: #fdfdfd;\n              height: 180px;\n              width: 33.33%;\n              border: 1px solid transparent;\n              border-radius: 9px;\n              box-shadow: 0 4px 19px 0 rgba(0, 0, 0, 0.07);\n              text-align: center;\n              margin-top: 15px;\n              margin-right: 6px;\n              // margin-left: 9px;\n              box-sizing: border-box;\n            }\n\n            .little-card .twoo {\n              padding: 5px;\n              background: #fdfdfd;\n              height: 180px;\n              width: 50%;\n              border: 1px solid transparent;\n              border-radius: 9px;\n              box-shadow: 0 4px 19px 0 rgba(0, 0, 0, 0.07);\n              text-align: center;\n              margin-top: 15px;\n              margin-right: 6px;\n              // margin-left: 9px;\n              box-sizing: border-box;\n            }\n\n            .add-media {\n              display: flex;\n              justify-content: center;\n              color: #58647b;\n              background-color: #f7f7f7 !important;\n              align-items: center;\n            }\n\n            .hideonMoblie {\n              display: block;\n            }\n\n            @media screen and (max-width: 768px) {\n              .hideonMoblie {\n                display: none;\n              }\n            }\n\n            .little-card .twoo:hover {\n              background: linear-gradient(to left, #fafafa, #eee);\n              cursor: pointer;\n            }\n\n            .none {\n              cursor: not-allowed !important;\n              color: #c3c3c3 !important;\n            }\n            .my-experience {\n              display: block;\n              padding-bottom: 10px;\n              padding-top: 10px;\n            }\n\n            .thumb-icon {\n              position: relative;\n              top: 2px;\n              // right: 1px;\n            }\n\n            .btn-content {\n              position: relative;\n              top: -05px;\n              margin-right: 3px;\n              color: grey;\n            }\n            .btn-content.get-it {\n              color: #fff !important;\n            }\n\n            .dis {\n              top: 3px;\n            }\n\n            h2 {\n              font-size: 1.2em;\n              font-family: inherit;\n            }\n\n            .option {\n              position: relative;\n              top: -110px;\n              left: 100px;\n              font-family: Cabin;\n            }\n\n            .action-button {\n              font-size: 1.2em;\n              font-weight: 600;\n              padding: 10px;\n              font-family: inherit;\n              border-radius: 2px;\n              border: 0;\n              margin-bottom: 10px;\n            }\n\n            .cancel {\n              margin-left: 200px;\n            }\n\n            .submit {\n              margin-left: 10px;\n            }\n\n            .add {\n              position: relative;\n              left: -47px;\n              top: 20px;\n              font-size: 0.95em;\n              font-weight: 600;\n              font-family: inherit;\n              cursor: pointer;\n            }\n\n            .form-rec-holder {\n              margin-bottom: 30px;\n            }\n\n            .textarea-1 {\n              width: 40vw;\n              height: 60px;\n              border-radius: 5px;\n              outline: 0;\n              padding: 10px;\n              resize: none;\n              font-family: inherit;\n              font-weight: 700;\n            }\n\n            .textarea-2 {\n              width: 40vw;\n              height: 60px;\n              outline: 0;\n              padding: 10px;\n              resize: none;\n              border: 1px solid #e6e8eb;\n              border-bottom-left-radius: 5px;\n              border-bottom-right-radius: 5px;\n              font-family: inherit;\n              font-weight: 700;\n            }\n\n            ::placeholder {\n              font-size: 0.9em;\n              font-family: Cabin;\n              font-weight: 600;\n            }\n\n            .pro-input-text {\n              width: 40vw;\n              height: 100%;\n              border-top-right-radius: 5px;\n              border-top-left-radius: 5px;\n              border: 1px solid #e6e8eb;\n              padding: 10px;\n              outline: 0;\n              font-family: inherit;\n              font-weight: 700;\n            }\n\n            .form-holder {\n              padding-left: 10%;\n              padding-top: 2px;\n            }\n\n            .get-it-btn {\n              font-family: Cabin;\n              font-weight: 600;\n              font-size: 1em;\n              letter-spacing: 0.3px;\n              height: 40px;\n              outline: 0;\n              border: 2px solid #4a4a4a;\n              cursor: pointer !important;\n              background: #4a4a4a;\n              border-radius: 9px;\n            }\n\n            .more-icon {\n              position: relative;\n              float: right;\n              display: inline-block;\n\n              // left: 92.5%;\n              cursor: pointer;\n              // border: 1px solid red;\n            }\n\n            .rec-btn {\n              display: flex;\n              box-sizing: border-box;\n              // border: 1px solid red;\n              margin-top: 5px;\n              justify-content: space-between;\n            }\n\n            // .rec-btn .get-it-btn {\n            //   position: relative;\n\n            // }\n\n            .rec-btn .rec-holder {\n              box-sizing: border-box;\n              display: flex;\n              justify-content: space-between;\n            }\n\n            .recommend-text.num {\n              position: relative;\n              top: -2px;\n              left: 2px;\n            }\n            .recommend-text.numie {\n              position: relative;\n              top: -4px;\n              left: 5px;\n            }\n\n            @media only screen and (max-width: 360px) {\n              .rec-btn .rec-holder {\n                // top: 10px;\n                position: relative;\n                // left: 22.5%;\n              }\n\n              // .more-icon {\n              //   left: 80%;\n              // }\n            }\n\n            @media only screen and (min-width: 360px) and (max-width: 470px) {\n              .rec-btn .rec-holder {\n                top: 10px;\n                position: relative;\n              }\n              // .recommend-text {\n              //   display: none;\n              // }\n\n              // .more-icon {\n              //   left: 85%;\n              // }\n\n              .close {\n                font-size: 56px;\n                position: relative;\n                margin-top: -500px;\n                left: 80%;\n              }\n            }\n\n            .like-btn {\n              font-size: 1.2em;\n              font-family: Cabin;\n              font-weight: 600;\n              letter-spacing: 0.3px;\n              border-top-left-radius: 9px;\n              border-bottom-left-radius: 9px;\n              outline: 0;\n              padding: 0;\n              border: 0;\n              height: 40px;\n              cursor: pointer !important;\n              background: #fff;\n              text-align: center;\n              margin-right: 5px;\n            }\n\n            .dislike-btn {\n              font-size: 1.2em;\n              font-family: Cabin;\n              font-weight: 600;\n              letter-spacing: 0.3px;\n              border-top-right-radius: 9px;\n              border-bottom-right-radius: 9px;\n              height: 40px;\n              outline: 0;\n              border: 0;\n\n              cursor: pointer !important;\n              color: grey;\n              background: #fff;\n              padding-left: 8px;\n            }\n\n            .overlay {\n              height: 100%;\n              width: 0;\n              position: fixed;\n              z-index: 6000;\n              top: 0;\n              left: 0;\n              background-color: rgba(0, 0, 0, 0.05);\n              overflow-x: hidden;\n              transition: 0.5s;\n            }\n            .overlayShow {\n              height: 100%;\n              width: 100%;\n              position: fixed;\n              z-index: 5000;\n              top: 0;\n              left: 0;\n              background-color: #fdfdfd;\n              overflow-x: hidden;\n              overflow-y: visible;\n              transition: 0.5s;\n            }\n\n            .overlayShowie {\n              height: 100%;\n              width: 100%;\n              position: fixed;\n              z-index: 5000;\n              top: 0;\n              left: 0;\n              background-color: rgb(0, 0, 0);\n              background-color: rgba(0, 0, 0, 0.5);\n              overflow-x: hidden;\n\n              transition: 0.5s;\n            }\n\n            .user-chip {\n              background-image: url(${profileImageUrl});\n              background-repeat: no-repeat;\n              background-size: cover;\n              background-position: center;\n              width: 50px;\n              height: 50px;\n              border-radius: 50px;\n              position: relative;\n              top: -60px;\n              left: 10px;\n              z-index: 1;\n            }\n\n            .user-rec-img {\n              width: 100%;\n              height: 200px;\n            }\n\n            .user-rec-card {\n              position: relative;\n              width: 50%;\n              min-height: 550px;\n\n              left: 25%;\n              background-color: #fafafa;\n              box-sizing: border-box;\n              border-radius: 10px;\n              box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.05);\n              margin-bottom: 10px;\n            }\n\n            @media (min-width: 768px) {\n              .topicview-close-icon {\n                left: 80%;\n              }\n            }\n\n            // @media (max-width: 767px) {\n            //   .card-list {\n            //     width: 70vw;\n            //     min-width: 200px;\n            //     min-height: 300px;\n            //   }\n            // }\n\n            @media screen and (min-width: 320px) and (max-width: 509px) {\n              .card-list {\n                min-width: 0px;\n                width: 93vw;\n                min-height: 300px;\n                margin-left: 0;\n              }\n            }\n\n            @media (min-width: 509px) and (max-width: 600px) {\n              .card-list {\n                min-width: 0px;\n                width: 94vw;\n                min-height: 300px;\n                margin-left: 0;\n              }\n            }\n\n            @media (min-width: 600px) and (max-width: 900px) {\n              .card-list {\n                min-width: 0px;\n                width: 94vw;\n                min-height: 300px;\n                margin-left: 0;\n              }\n            }\n          `}\n        </style>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAoBA;AACA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AA4DA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAOA;AACA;AACA;AAEA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AADA;AAAA;AAAA;AAGA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;;;;;;;;;;;AA/bA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAYA;AACA;AAGA;;;AA+aA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAFA;AAAA;AAIA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAFA;AAIA;AAxBA;AAAA;AA6BA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAAA;AAmBA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AASA;AACA;AA3EA;AAiFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAQA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAjCA;AAAA;AAmCA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AArCA;AAAA;AAuCA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAFA;AAAA;AAIA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAFA;AAIA;AAxBA;AAAA;AA6BA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAAA;AAmBA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AASA;AACA;AA3EA;AAiFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AA/BA;AAAA;AAiCA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AApCA;AAAA;AAsCA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAOA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAAA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAAA;AAaA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAAA;AAUA;AACA;AACA;AADA;AAGA;AANA;AAAA;AAYA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AACA;AACA;AACA;AACA;AAJA;AAOA;AARA;AAAA;AAgBA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AASA;AAAA;AAEA;AAEA;AACA;AACA;AALA;AAAA;AAWA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAcA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AASA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAYA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AACA;AAFA;AAaA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AASA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAYA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAcA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAYA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AAEA;AADA;AADA;AAFA;AAAA;AAQA;AAAA;AAAA;AAGA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AASA;AACA;AAAA;AAAA;AAFA;AAMA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AA1yBA;AAAA;AAAA;AAq2CA;;;;AAj3DA;AACA;;;;;A","sourceRoot":""}